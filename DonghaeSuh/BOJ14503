dx = [-1,0,1,0]
dy = [0,1,0,-1]


def back(x,y,direction): 
    if direction == 0 or direction == 1:
        nx = x+dx[direction+2]
        ny = y+dy[direction+2]
    if direction == 2 or direction == 3:
        nx = x+dx[direction-2]
        ny = y+dy[direction-2]
    return nx,ny

n,m = map(int,input().split())
r,c,d = map(int,input().split())
graph = []
for _ in range(n):
    graph.append(list(map(int,input().split())))

graph[r][c]=-1
count=1
while True:
    unavail = 0
    
    for _ in range(4): 
        nx = r+dx[(3+d)%4]
        ny = c+dy[(3+d)%4]
        
        if 0<=nx<n and 0<=ny<m and graph[nx][ny]==0:
            d = (3+d)%4
            graph[nx][ny] = -1
            r = nx
            c = ny
            count+=1
            unavail = 1
            break
        
        else:
            d = (3+d)%4
    
    if unavail == 0:
        a,b = back(r,c,d)
        if graph[a][b] ==1:
            break
        else:
            r,c = a,b
            
print(count)
